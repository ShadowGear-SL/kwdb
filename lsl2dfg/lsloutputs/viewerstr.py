#!/usr/bin/env python

# viewerstr.py - This is a LSL2dfg.py output module generating elements for strings.xml viewer file.
#
# (C) Copyright 2013, 2024 Sei Lisa.
# Sei Lisa is the author's username in the Second Life(R) online virtual world.
#
# This file is part of LSL2 Derived Files Generator.
#
#    LSL2 Derived Files Generator is free software: you can redistribute it
#    and/or modify it under the terms of the GNU Lesser General Public License
#    as published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    LSL2 Derived Files Generator is distributed in the hope that it will be
#    useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with LSL2 Derived Files Generator. If not, see
#    <http://www.gnu.org/licenses/>.
#
# Second Life is a registered trademark of Linden Research, Inc.


import sys

def output(document, defaultdescs, databaseversion, infilename, outfilename, lang, tag):

  version = "0.0.20130101000"

  if lang not in defaultdescs:
    defaultdescs[lang] = defaultdescs["default"]

  marker = "<<< %s KEYWORDS >>>" % tag

  if infilename is not None:
    inf = open(infilename, "r")
  else:
    inf = sys.stdin

  try:
    inputlines = inf.readlines()

  finally:
    if infilename is not None:
      inf.close()

  if outfilename is not None:
    outf = open(outfilename, "w")
  else:
    outf = sys.stdout

  try:

    for line in inputlines:
      if not line.startswith(marker):
        outf.write(line)
      else:

        outf.write("\n<!-- Generated by LSL2 Derived Files Generator. Database version: %s; output module version: %s -->\n"
          % (databaseversion, version))

        for element in document:
          if element["cat"] == "function":

            if "desc" in element and lang in element["desc"]:
              desc = element["desc"][lang]["text"]
            else:
              desc = defaultdescs[lang]

            func = ""
            if "type" in element:
              func = element["type"] + " "
            func = func + element["name"] + "("
            first = True
            if "params" in element:
              for param in element["params"]:
                if first:
                  first = False
                else:
                  func = func + ", "
                func = func + param["type"] + " " + param["name"]
            func = func + ")\n"

            elemtext = func + desc
            elemtext = elemtext.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;") #.replace("'", "&apos;")
            outf.write('\t<string name="LSLTipText_%s" translate="false">\n%s\n\t</string>\n'
                        % (element["name"], elemtext))

  finally:
    if outfilename is not None:
      outf.close()

pass
